using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.XR.Interaction.Toolkit;

public class XRMovement : MonoBehaviour
{
    public ActionBasedContinuousMoveProvider CMP;
    public float jumpSpeed = 5f;
    public Transform groundCheck;
    public LayerMask groundLayer;
    public float sprintDuration = 3f;
    public float sprintCooldown = 5f;
    public float sprintMultiplier = 1.5f;
    private float sprintTimer;
    private float activeSprintCooldown;
    private bool isSprinting = false;

    private CharacterController controller;
    private Vector3 velocity;
    private PlayerInput playerInput;
    private InputAction sprintAction;
    private InputAction jumpAction;
    private bool isGrounded;

    // Initialize components and input actions
    void Awake()
    {
        controller = GetComponent<CharacterController>();
        playerInput = GetComponent<PlayerInput>();
        sprintAction = playerInput.actions["Sprint"];
        jumpAction = playerInput.actions["Jump"];
    }

    private void Update()
    {
        var sprintInput = sprintAction.ReadValue<float>();
        var jumpInput = jumpAction.ReadValue<float>();

        // Handle sprinting input and logic
        if (sprintInput > 0 && !isSprinting && activeSprintCooldown <= 0f)
        {
            StartSprinting();
        }

        // Handle sprinting logic when not sprinting
        if (!isSprinting)
        {
            SprintingLogic();
        }

        // Handle jumping input
        if (velocity.y <= 0 && jumpInput > 0)
        {
            Jump();
        }

        // Apply gravity to the player
        ApplyGravity();
    }

    // Start the sprinting process
    private void StartSprinting()
    {
        isSprinting = true;
        sprintTimer = sprintDuration;
        CMP.moveSpeed *= sprintMultiplier;
        activeSprintCooldown = sprintCooldown;
        StartCoroutine(SprintingCoroutine());
    }

    // Coroutine to manage sprint duration
    private IEnumerator SprintingCoroutine()
    {
        while (sprintTimer > 0f)
        {
            sprintTimer -= Time.deltaTime;
            yield return null;
        }

        StopSprinting();
    }

    // Stop the sprinting process
    private void StopSprinting()
    {
        isSprinting = false;
        CMP.moveSpeed /= sprintMultiplier;
    }

    // Manage sprint cooldown logic
    private void SprintingLogic()
    {
        if (activeSprintCooldown > 0f)
        {
            activeSprintCooldown -= Time.deltaTime;
        }
    }

    // Apply the jump force
    private void Jump()
    {
        velocity.y = Mathf.Sqrt(jumpSpeed * -2f * Physics.gravity.y);
    }

    // Apply gravity and manage vertical movement
    private void ApplyGravity()
    {
        if (!controller.isGrounded)
        {
            velocity.y += Physics.gravity.y * Time.deltaTime;
        }

        if (controller.isGrounded)
        {
            velocity.y = -2f; // Small value to keep the player grounded
        }

        // Move the character controller with the calculated velocity
        controller.Move(velocity * Time.deltaTime);
    }
}
